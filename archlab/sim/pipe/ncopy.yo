                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x000: 6300                 | 	xorq %rax,%rax		# count = 0;
0x002: 70b901000000000000   | 	jmp Test
                            | 
0x00b: 50874800000000000000 | L:	mrmovq 72(%rdi), %r8	# read val from src...
0x015: 50974000000000000000 | 	mrmovq 64(%rdi), %r9	# read val from src...
0x01f: 50a73800000000000000 | 	mrmovq 56(%rdi), %r10	# read val from src...
0x029: 50b73000000000000000 | 	mrmovq 48(%rdi), %r11	# read val from src...
0x033: 50172800000000000000 | 	mrmovq 40(%rdi), %rcx	# read val from src...
0x03d: 40864800000000000000 | 	rmmovq %r8, 72(%rsi)	# ...and store it to dst
0x047: 6288                 | 	andq %r8, %r8		# val <= 0?
0x049: 715c00000000000000   | 	jle L1		
0x052: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 	
0x05c: 40964000000000000000 | L1:	rmmovq %r9, 64(%rsi)	# ...and store it to dst
0x066: 6299                 | 	andq %r9, %r9		# val <= 0?
0x068: 717b00000000000000   | 	jle L2		# if so, goto Npos:
0x071: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 	
0x07b: 40a63800000000000000 | L2:	rmmovq %r10, 56(%rsi)	# ...and store it to dst
0x085: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x087: 719a00000000000000   | 	jle L3		
0x090: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 	
0x09a: 40b63000000000000000 | L3:	rmmovq %r11, 48(%rsi)	# ...and store it to dst
0x0a4: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0a6: 71b900000000000000   | 	jle L4		
0x0af: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 	
0x0b9: 40162800000000000000 | L4:	rmmovq %rcx, 40(%rsi)	# ...and store it to dst
0x0c3: 6211                 | 	andq %rcx, %rcx		# val <= 0?
0x0c5: 71d800000000000000   | 	jle L5		
0x0ce: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 	
0x0d8: 50872000000000000000 | L5:	mrmovq 32(%rdi), %r8	# read val from src...
0x0e2: 50971800000000000000 | 	mrmovq 24(%rdi), %r9	# read val from src...
0x0ec: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x0f6: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x100: 50170000000000000000 | 	mrmovq (%rdi), %rcx	# read val from src...
0x10a: 40862000000000000000 | 	rmmovq %r8, 32(%rsi)	# ...and store it to dst
0x114: 6288                 | 	andq %r8, %r8		# val <= 0?
0x116: 712901000000000000   | 	jle L6		
0x11f: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 	
0x129: 40961800000000000000 | L6:	rmmovq %r9, 24(%rsi)	# ...and store it to dst
0x133: 6299                 | 	andq %r9, %r9		# val <= 0?
0x135: 714801000000000000   | 	jle L7		# if so, goto Npos:
0x13e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 	
0x148: 40a61000000000000000 | L7:	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x152: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x154: 716701000000000000   | 	jle L8		
0x15d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 	
0x167: 40b60800000000000000 | L8:	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x171: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x173: 718601000000000000   | 	jle L9		
0x17c: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 	
0x186: 40160000000000000000 | L9:	rmmovq %rcx, (%rsi)	# ...and store it to dst
0x190: 6211                 | 	andq %rcx, %rcx		# val <= 0?
0x192: 71a501000000000000   | 	jle Npos		
0x19b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 	
0x1a5: c0f75000000000000000 | Npos:	iaddq $80, %rdi		# src++
0x1af: c0f65000000000000000 | 	iaddq $80, %rsi		# dst++
0x1b9: c0f2f6ffffffffffffff | Test:	iaddq $-10, %rdx
0x1c3: 750b00000000000000   | 	jge L
0x1cc: c0f20700000000000000 | 	iaddq $7, %rdx		# len = 3?
0x1d6: 720d02000000000000   | 	jl Lo
0x1df: 763402000000000000   | 	jg Gr
0x1e8: 704f03000000000000   | 	jmp L17
0x1f1: c0f20100000000000000 | Lo1:	iaddq $1, %rdx		# len = 5?
0x1fb: 742603000000000000   | 	jne L16			# len = 4?
0x204: 70fd02000000000000   | 	jmp L15
0x20d: c0f20200000000000000 | Lo:	iaddq $2, %rdx		# len = 1?
0x217: 73a103000000000000   | 	je L19			
0x220: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len = 2?
0x22a: 737803000000000000   | 	je L18
0x233: 90                   | 	ret			# len <= 0?
0x234: c0f2fdffffffffffffff | Gr:	iaddq $-3, %rdx		# len = 6?
0x23e: 72f101000000000000   | 	jl Lo1
0x247: 73d402000000000000   | 	je L14
0x250: c0f2feffffffffffffff | 	iaddq $-2, %rdx		# len = 8?
0x25a: 738202000000000000   | 	je L12
0x263: 72ab02000000000000   | 	jl L13			# len = 7?
                            | 
0x26c: 50974000000000000000 | L11:	mrmovq 64(%rdi), %r9	# read val from src...
0x276: 40964000000000000000 | 	rmmovq %r9, 64(%rsi)	# ...and store it to dst
0x280: 6299                 | 	andq %r9, %r9		# val <= 0?
                            | 	
0x282: 50a73800000000000000 | L12:	mrmovq 56(%rdi), %r10	# read val from src...
0x28c: 719f02000000000000   | 	jle L12a		
0x295: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x29f: 40a63800000000000000 | L12a:	rmmovq %r10, 56(%rsi)	# ...and store it to dst
0x2a9: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 	
0x2ab: 50b73000000000000000 | L13:	mrmovq 48(%rdi), %r11	# read val from src...
0x2b5: 71c802000000000000   | 	jle L13a		
0x2be: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2c8: 40b63000000000000000 | L13a:	rmmovq %r11, 48(%rsi)	# ...and store it to dst
0x2d2: 62bb                 | 	andq %r11, %r11		# val <= 0?
                            | 	
0x2d4: 50172800000000000000 | L14:	mrmovq 40(%rdi), %rcx	# read val from src...
0x2de: 71f102000000000000   | 	jle L14a		
0x2e7: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2f1: 40162800000000000000 | L14a:	rmmovq %rcx, 40(%rsi)	# ...and store it to dst
0x2fb: 6211                 | 	andq %rcx, %rcx		# val <= 0?
                            | 
0x2fd: 50872000000000000000 | L15:	mrmovq 32(%rdi), %r8	# read val from src...
0x307: 711a03000000000000   | 	jle L15a		
0x310: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x31a: 40862000000000000000 | L15a:	rmmovq %r8, 32(%rsi)	# ...and store it to dst
0x324: 6288                 | 	andq %r8, %r8		# val <= 0?
                            | 
0x326: 50971800000000000000 | L16:	mrmovq 24(%rdi), %r9	# read val from src...
0x330: 714303000000000000   | 	jle L16a		
0x339: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x343: 40961800000000000000 | L16a:	rmmovq %r9, 24(%rsi)	# ...and store it to dst
0x34d: 6299                 | 	andq %r9, %r9		# val <= 0?
                            | 	
0x34f: 50a71000000000000000 | L17:	mrmovq 16(%rdi), %r10	# read val from src...
0x359: 716c03000000000000   | 	jle L17a		
0x362: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x36c: 40a61000000000000000 | L17a:	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x376: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 	
0x378: 50b70800000000000000 | L18:	mrmovq 8(%rdi), %r11	# read val from src...
0x382: 719503000000000000   | 	jle L18a		
0x38b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x395: 40b60800000000000000 | L18a:	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x39f: 62bb                 | 	andq %r11, %r11		# val <= 0?
                            | 	
0x3a1: 50170000000000000000 | L19:	mrmovq (%rdi), %rcx	# read val from src...
0x3ab: 71be03000000000000   | 	jle L19a		
0x3b4: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x3be: 40160000000000000000 | L19a:	rmmovq %rcx, (%rsi)	# ...and store it to dst
0x3c8: 6211                 | 	andq %rcx, %rcx		# val <= 0?
0x3ca: 71dd03000000000000   | 	jle Done		
0x3d3: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3dd:                      | Done:
0x3dd: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3de:                      | End:
                            | #/* $end ncopy-ys */
