#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	jmp Test

Loop:	iaddq $-1, %rdx
	mrmovq 32(%rdi), %r8	# read val from src...
	mrmovq 24(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	mrmovq (%rdi), %rcx	# read val from src...
	rmmovq %r8, 32(%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle Loop1		
	iaddq $1, %rax		# count++
	
Loop1:	rmmovq %r9, 24(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	jle Loop2		# if so, goto Npos:
	iaddq $1, %rax		# count++
	
Loop2:	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Loop3		
	iaddq $1, %rax		# count++
	
Loop3:	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle Loop4		
	iaddq $1, %rax		# count++
	
Loop4:	rmmovq %rcx, (%rsi)	# ...and store it to dst
	andq %rcx, %rcx		# val <= 0?
	jle Npos		
	iaddq $1, %rax		# count++
	
Npos:	iaddq $40, %rdi		# src++
	iaddq $40, %rsi		# dst++
Test:	iaddq $-4, %rdx
	jg Loop
	je Loop5
	iaddq $1, %rdx		# len = 3?
	je Loop6
	iaddq $1, %rdx		# len = 2?
	je Loop7
	iaddq $1, %rdx		# len = 1?
	je Loop8
	ret			# len <= 0?
	
Loop5:	mrmovq 24(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	mrmovq (%rdi), %rcx	# read val from src...
	rmmovq %r9, 24(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	jle Loop60		
	iaddq $1, %rax		# count++
	jmp Loop60
	
Loop6:	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	mrmovq (%rdi), %rcx	# read val from src...
Loop60:	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Loop70		
	iaddq $1, %rax		# count++
	jmp Loop70
	
Loop7:	mrmovq 8(%rdi), %r11	# read val from src...
	mrmovq (%rdi), %rcx	# read val from src...
Loop70:	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle Loop80		
	iaddq $1, %rax		# count++
	jmp Loop80
	
Loop8:	mrmovq (%rdi), %rcx	# read val from src...
Loop80:	rmmovq %rcx, (%rsi)	# ...and store it to dst
	andq %rcx, %rcx		# val <= 0?
	jle Done		
	iaddq $1, %rax		# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
