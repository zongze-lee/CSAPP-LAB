#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-10, %rdx
	jl Test

L:	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	mrmovq 32(%rdi), %rcx	# read val from src...
	rmmovq %r8, (%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle L1		
	iaddq $1, %rax		# count++
	
L1:	rmmovq %r9, 8(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	jle L2		
	iaddq $1, %rax		# count++
	
L2:	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle L3		
	iaddq $1, %rax		# count++
	
L3:	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle L4		
	iaddq $1, %rax		# count++
	
L4:	rmmovq %rcx, 32(%rsi)	# ...and store it to dst
	andq %rcx, %rcx		# val <= 0?
	jle L5		
	iaddq $1, %rax		# count++
	
L5:	mrmovq 40(%rdi), %r8	# read val from src...
	mrmovq 48(%rdi), %r9	# read val from src...
	mrmovq 56(%rdi), %r10	# read val from src...
	mrmovq 64(%rdi), %r11	# read val from src...
	mrmovq 72(%rdi), %rcx	# read val from src...
	rmmovq %r8, 40(%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle L6		
	iaddq $1, %rax		# count++
	
L6:	rmmovq %r9, 48(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	jle L7		# if so, goto Npos:
	iaddq $1, %rax		# count++
	
L7:	rmmovq %r10, 56(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle L8		
	iaddq $1, %rax		# count++
	
L8:	rmmovq %r11, 64(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle L9		
	iaddq $1, %rax		# count++
	
L9:	rmmovq %rcx, 72(%rsi)	# ...and store it to dst
	andq %rcx, %rcx		# val <= 0?
	jle Npos		
	iaddq $1, %rax		# count++
	
Npos:	iaddq $80, %rdi		# src++
	iaddq $80, %rsi		# dst++
	iaddq $-10, %rdx
	jge L
Test:	iaddq $7, %rdx		# len = 3?
	jl Lo
	jg Gr
	jmp L17
Lo1:	iaddq $1, %rdx		# len = 5?
	jne L16			# len = 4
	jmp L15
Lo:	iaddq $2, %rdx		# len = 1?
	je L19			
	iaddq $-1, %rdx		# len = 2?
	je L18
	ret			# len <= 0
Gr:	iaddq $-3, %rdx		# len = 6?
	jl Lo1
	je L14
	iaddq $-2, %rdx		# len = 8?
	je L12
	jl L13			# len = 7

L11:	mrmovq 64(%rdi), %r9	# read val from src...
	rmmovq %r9, 64(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	
L12:	mrmovq 56(%rdi), %r10	# read val from src...
	jle L12a		
	iaddq $1, %rax		# count++
L12a:	rmmovq %r10, 56(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	
L13:	mrmovq 48(%rdi), %r11	# read val from src...
	jle L13a		
	iaddq $1, %rax		# count++
L13a:	rmmovq %r11, 48(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	
L14:	mrmovq 40(%rdi), %rcx	# read val from src...
	jle L14a		
	iaddq $1, %rax		# count++
L14a:	rmmovq %rcx, 40(%rsi)	# ...and store it to dst
	andq %rcx, %rcx		# val <= 0?

L15:	mrmovq 32(%rdi), %r8	# read val from src...
	jle L15a		
	iaddq $1, %rax		# count++
L15a:	rmmovq %r8, 32(%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?

L16:	mrmovq 24(%rdi), %r9	# read val from src...
	jle L16a		
	iaddq $1, %rax		# count++
L16a:	rmmovq %r9, 24(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	
L17:	mrmovq 16(%rdi), %r10	# read val from src...
	jle L17a		
	iaddq $1, %rax		# count++
L17a:	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	
L18:	mrmovq 8(%rdi), %r11	# read val from src...
	jle L18a		
	iaddq $1, %rax		# count++
L18a:	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	
L19:	mrmovq (%rdi), %rcx	# read val from src...
	jle L19a		
	iaddq $1, %rax		# count++
L19a:	rmmovq %rcx, (%rsi)	# ...and store it to dst
	andq %rcx, %rcx		# val <= 0?
	jle Done		
	iaddq $1, %rax		# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
